// ERC20Token.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
 
import "https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol";
 
contract ERC20Token is ERC20 {
    constructor(uint256 initialSupply) public ERC20("ALYRA", "ALY") {
        _mint(msg.sender, initialSupply);
   }
}





// Crowdsale.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./ERC20Token.sol";

contract Crowdsale {
   uint public rate = 200; // le taux Ã  utiliser
   ERC20Token public token;

   constructor(uint256 initialSupply) public {
       token = new ERC20Token(initialSupply);
   }
   receive() external payable {
       require(msg.value >= 0.1 ether, "vous ne pouvez pas envoyer moins de 0.1 ether");
       distribute(msg.value);
   }
   function distribute(uint256 amount) internal {
       uint256 tokensToSent = amount * rate;
      token.transfer(msg.sender, tokensToSent);
   }
}
